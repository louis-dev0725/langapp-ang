// source: lattice_dump.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.jumanpp.FeatureInstance', null, global);
goog.exportSymbol('proto.jumanpp.FieldValue', null, global);
goog.exportSymbol('proto.jumanpp.FieldValue.ValueCase', null, global);
goog.exportSymbol('proto.jumanpp.KVList', null, global);
goog.exportSymbol('proto.jumanpp.KeyValue', null, global);
goog.exportSymbol('proto.jumanpp.LatticeBoundary', null, global);
goog.exportSymbol('proto.jumanpp.LatticeDump', null, global);
goog.exportSymbol('proto.jumanpp.LatticeDumpNode', null, global);
goog.exportSymbol('proto.jumanpp.LatticePathNode', null, global);
goog.exportSymbol('proto.jumanpp.PathPointer', null, global);
goog.exportSymbol('proto.jumanpp.StringList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.PathPointer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jumanpp.PathPointer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.PathPointer.displayName = 'proto.jumanpp.PathPointer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.FeatureInstance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jumanpp.FeatureInstance.repeatedFields_, null);
};
goog.inherits(proto.jumanpp.FeatureInstance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.FeatureInstance.displayName = 'proto.jumanpp.FeatureInstance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.LatticePathNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jumanpp.LatticePathNode.repeatedFields_, null);
};
goog.inherits(proto.jumanpp.LatticePathNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.LatticePathNode.displayName = 'proto.jumanpp.LatticePathNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jumanpp.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.KeyValue.displayName = 'proto.jumanpp.KeyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.KVList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jumanpp.KVList.repeatedFields_, null);
};
goog.inherits(proto.jumanpp.KVList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.KVList.displayName = 'proto.jumanpp.KVList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.StringList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jumanpp.StringList.repeatedFields_, null);
};
goog.inherits(proto.jumanpp.StringList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.StringList.displayName = 'proto.jumanpp.StringList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.FieldValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.jumanpp.FieldValue.oneofGroups_);
};
goog.inherits(proto.jumanpp.FieldValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.FieldValue.displayName = 'proto.jumanpp.FieldValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.LatticeDumpNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jumanpp.LatticeDumpNode.repeatedFields_, null);
};
goog.inherits(proto.jumanpp.LatticeDumpNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.LatticeDumpNode.displayName = 'proto.jumanpp.LatticeDumpNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.LatticeBoundary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jumanpp.LatticeBoundary.repeatedFields_, null);
};
goog.inherits(proto.jumanpp.LatticeBoundary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.LatticeBoundary.displayName = 'proto.jumanpp.LatticeBoundary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.LatticeDump = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jumanpp.LatticeDump.repeatedFields_, null);
};
goog.inherits(proto.jumanpp.LatticeDump, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.LatticeDump.displayName = 'proto.jumanpp.LatticeDump';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.PathPointer.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.PathPointer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.PathPointer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.PathPointer.toObject = function(includeInstance, msg) {
  var f, obj = {
    boundary: jspb.Message.getFieldWithDefault(msg, 1, 0),
    node: jspb.Message.getFieldWithDefault(msg, 2, 0),
    beam: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.PathPointer}
 */
proto.jumanpp.PathPointer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.PathPointer;
  return proto.jumanpp.PathPointer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.PathPointer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.PathPointer}
 */
proto.jumanpp.PathPointer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBoundary(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.PathPointer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.PathPointer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.PathPointer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.PathPointer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoundary();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNode();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getBeam();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 boundary = 1;
 * @return {number}
 */
proto.jumanpp.PathPointer.prototype.getBoundary = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.PathPointer} returns this
 */
proto.jumanpp.PathPointer.prototype.setBoundary = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 node = 2;
 * @return {number}
 */
proto.jumanpp.PathPointer.prototype.getNode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.PathPointer} returns this
 */
proto.jumanpp.PathPointer.prototype.setNode = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 beam = 3;
 * @return {number}
 */
proto.jumanpp.PathPointer.prototype.getBeam = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.PathPointer} returns this
 */
proto.jumanpp.PathPointer.prototype.setBeam = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jumanpp.FeatureInstance.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.FeatureInstance.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.FeatureInstance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.FeatureInstance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.FeatureInstance.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    patternsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    repr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rawValue: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maskedValue: jspb.Message.getFieldWithDefault(msg, 5, 0),
    weight: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.FeatureInstance}
 */
proto.jumanpp.FeatureInstance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.FeatureInstance;
  return proto.jumanpp.FeatureInstance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.FeatureInstance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.FeatureInstance}
 */
proto.jumanpp.FeatureInstance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setPatternsList(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepr(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setRawValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMaskedValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.FeatureInstance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.FeatureInstance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.FeatureInstance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.FeatureInstance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPatternsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getRepr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRawValue();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getMaskedValue();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.jumanpp.FeatureInstance.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.FeatureInstance} returns this
 */
proto.jumanpp.FeatureInstance.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int32 patterns = 2;
 * @return {!Array<number>}
 */
proto.jumanpp.FeatureInstance.prototype.getPatternsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.jumanpp.FeatureInstance} returns this
 */
proto.jumanpp.FeatureInstance.prototype.setPatternsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.FeatureInstance} returns this
 */
proto.jumanpp.FeatureInstance.prototype.addPatterns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.FeatureInstance} returns this
 */
proto.jumanpp.FeatureInstance.prototype.clearPatternsList = function() {
  return this.setPatternsList([]);
};


/**
 * optional string repr = 3;
 * @return {string}
 */
proto.jumanpp.FeatureInstance.prototype.getRepr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.FeatureInstance} returns this
 */
proto.jumanpp.FeatureInstance.prototype.setRepr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional fixed32 raw_value = 4;
 * @return {number}
 */
proto.jumanpp.FeatureInstance.prototype.getRawValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.FeatureInstance} returns this
 */
proto.jumanpp.FeatureInstance.prototype.setRawValue = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 masked_value = 5;
 * @return {number}
 */
proto.jumanpp.FeatureInstance.prototype.getMaskedValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.FeatureInstance} returns this
 */
proto.jumanpp.FeatureInstance.prototype.setMaskedValue = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional float weight = 6;
 * @return {number}
 */
proto.jumanpp.FeatureInstance.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.FeatureInstance} returns this
 */
proto.jumanpp.FeatureInstance.prototype.setWeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jumanpp.LatticePathNode.repeatedFields_ = [3,5,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.LatticePathNode.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.LatticePathNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.LatticePathNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.LatticePathNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawScoresList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    cumScore: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    ranksList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.jumanpp.PathPointer.toObject, includeInstance),
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.jumanpp.FeatureInstance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.LatticePathNode}
 */
proto.jumanpp.LatticePathNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.LatticePathNode;
  return proto.jumanpp.LatticePathNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.LatticePathNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.LatticePathNode}
 */
proto.jumanpp.LatticePathNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setRawScoresList(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCumScore(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setRanksList(value);
      break;
    case 10:
      var value = new proto.jumanpp.PathPointer;
      reader.readMessage(value,proto.jumanpp.PathPointer.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 11:
      var value = new proto.jumanpp.FeatureInstance;
      reader.readMessage(value,proto.jumanpp.FeatureInstance.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.LatticePathNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.LatticePathNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.LatticePathNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.LatticePathNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawScoresList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = message.getCumScore();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getRanksList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.jumanpp.PathPointer.serializeBinaryToWriter
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.jumanpp.FeatureInstance.serializeBinaryToWriter
    );
  }
};


/**
 * repeated float raw_scores = 3;
 * @return {!Array<number>}
 */
proto.jumanpp.LatticePathNode.prototype.getRawScoresList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.jumanpp.LatticePathNode} returns this
 */
proto.jumanpp.LatticePathNode.prototype.setRawScoresList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.LatticePathNode} returns this
 */
proto.jumanpp.LatticePathNode.prototype.addRawScores = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticePathNode} returns this
 */
proto.jumanpp.LatticePathNode.prototype.clearRawScoresList = function() {
  return this.setRawScoresList([]);
};


/**
 * optional float cum_score = 4;
 * @return {number}
 */
proto.jumanpp.LatticePathNode.prototype.getCumScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.LatticePathNode} returns this
 */
proto.jumanpp.LatticePathNode.prototype.setCumScore = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * repeated int32 ranks = 5;
 * @return {!Array<number>}
 */
proto.jumanpp.LatticePathNode.prototype.getRanksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.jumanpp.LatticePathNode} returns this
 */
proto.jumanpp.LatticePathNode.prototype.setRanksList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.LatticePathNode} returns this
 */
proto.jumanpp.LatticePathNode.prototype.addRanks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticePathNode} returns this
 */
proto.jumanpp.LatticePathNode.prototype.clearRanksList = function() {
  return this.setRanksList([]);
};


/**
 * repeated PathPointer nodes = 10;
 * @return {!Array<!proto.jumanpp.PathPointer>}
 */
proto.jumanpp.LatticePathNode.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.jumanpp.PathPointer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jumanpp.PathPointer, 10));
};


/**
 * @param {!Array<!proto.jumanpp.PathPointer>} value
 * @return {!proto.jumanpp.LatticePathNode} returns this
*/
proto.jumanpp.LatticePathNode.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.jumanpp.PathPointer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.PathPointer}
 */
proto.jumanpp.LatticePathNode.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.jumanpp.PathPointer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticePathNode} returns this
 */
proto.jumanpp.LatticePathNode.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * repeated FeatureInstance features = 11;
 * @return {!Array<!proto.jumanpp.FeatureInstance>}
 */
proto.jumanpp.LatticePathNode.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.jumanpp.FeatureInstance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jumanpp.FeatureInstance, 11));
};


/**
 * @param {!Array<!proto.jumanpp.FeatureInstance>} value
 * @return {!proto.jumanpp.LatticePathNode} returns this
*/
proto.jumanpp.LatticePathNode.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.jumanpp.FeatureInstance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.FeatureInstance}
 */
proto.jumanpp.LatticePathNode.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.jumanpp.FeatureInstance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticePathNode} returns this
 */
proto.jumanpp.LatticePathNode.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.KeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.KeyValue}
 */
proto.jumanpp.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.KeyValue;
  return proto.jumanpp.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.KeyValue}
 */
proto.jumanpp.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.KeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.KeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.jumanpp.KeyValue.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.KeyValue} returns this
 */
proto.jumanpp.KeyValue.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.jumanpp.KeyValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.KeyValue} returns this
 */
proto.jumanpp.KeyValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jumanpp.KVList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.KVList.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.KVList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.KVList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.KVList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.jumanpp.KeyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.KVList}
 */
proto.jumanpp.KVList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.KVList;
  return proto.jumanpp.KVList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.KVList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.KVList}
 */
proto.jumanpp.KVList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jumanpp.KeyValue;
      reader.readMessage(value,proto.jumanpp.KeyValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.KVList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.KVList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.KVList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.KVList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.jumanpp.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KeyValue values = 1;
 * @return {!Array<!proto.jumanpp.KeyValue>}
 */
proto.jumanpp.KVList.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.jumanpp.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jumanpp.KeyValue, 1));
};


/**
 * @param {!Array<!proto.jumanpp.KeyValue>} value
 * @return {!proto.jumanpp.KVList} returns this
*/
proto.jumanpp.KVList.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jumanpp.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.KeyValue}
 */
proto.jumanpp.KVList.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jumanpp.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.KVList} returns this
 */
proto.jumanpp.KVList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jumanpp.StringList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.StringList.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.StringList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.StringList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.StringList.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.StringList}
 */
proto.jumanpp.StringList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.StringList;
  return proto.jumanpp.StringList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.StringList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.StringList}
 */
proto.jumanpp.StringList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.StringList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.StringList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.StringList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.StringList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string values = 1;
 * @return {!Array<string>}
 */
proto.jumanpp.StringList.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jumanpp.StringList} returns this
 */
proto.jumanpp.StringList.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.StringList} returns this
 */
proto.jumanpp.StringList.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.StringList} returns this
 */
proto.jumanpp.StringList.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.jumanpp.FieldValue.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.jumanpp.FieldValue.ValueCase = {
  VALUE_NOT_SET: 0,
  INT: 1,
  STRING: 2,
  KVLIST: 3,
  STRING_LIST: 4
};

/**
 * @return {proto.jumanpp.FieldValue.ValueCase}
 */
proto.jumanpp.FieldValue.prototype.getValueCase = function() {
  return /** @type {proto.jumanpp.FieldValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.jumanpp.FieldValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.FieldValue.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.FieldValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.FieldValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.FieldValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_int: jspb.Message.getFieldWithDefault(msg, 1, 0),
    string: jspb.Message.getFieldWithDefault(msg, 2, ""),
    kvlist: (f = msg.getKvlist()) && proto.jumanpp.KVList.toObject(includeInstance, f),
    stringList: (f = msg.getStringList()) && proto.jumanpp.StringList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.FieldValue}
 */
proto.jumanpp.FieldValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.FieldValue;
  return proto.jumanpp.FieldValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.FieldValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.FieldValue}
 */
proto.jumanpp.FieldValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 3:
      var value = new proto.jumanpp.KVList;
      reader.readMessage(value,proto.jumanpp.KVList.deserializeBinaryFromReader);
      msg.setKvlist(value);
      break;
    case 4:
      var value = new proto.jumanpp.StringList;
      reader.readMessage(value,proto.jumanpp.StringList.deserializeBinaryFromReader);
      msg.setStringList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.FieldValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.FieldValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.FieldValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.FieldValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKvlist();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.jumanpp.KVList.serializeBinaryToWriter
    );
  }
  f = message.getStringList();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.jumanpp.StringList.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 int = 1;
 * @return {number}
 */
proto.jumanpp.FieldValue.prototype.getInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.FieldValue} returns this
 */
proto.jumanpp.FieldValue.prototype.setInt = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.jumanpp.FieldValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.FieldValue} returns this
 */
proto.jumanpp.FieldValue.prototype.clearInt = function() {
  return jspb.Message.setOneofField(this, 1, proto.jumanpp.FieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.FieldValue.prototype.hasInt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string string = 2;
 * @return {string}
 */
proto.jumanpp.FieldValue.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.FieldValue} returns this
 */
proto.jumanpp.FieldValue.prototype.setString = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.jumanpp.FieldValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.FieldValue} returns this
 */
proto.jumanpp.FieldValue.prototype.clearString = function() {
  return jspb.Message.setOneofField(this, 2, proto.jumanpp.FieldValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.FieldValue.prototype.hasString = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional KVList kvlist = 3;
 * @return {?proto.jumanpp.KVList}
 */
proto.jumanpp.FieldValue.prototype.getKvlist = function() {
  return /** @type{?proto.jumanpp.KVList} */ (
    jspb.Message.getWrapperField(this, proto.jumanpp.KVList, 3));
};


/**
 * @param {?proto.jumanpp.KVList|undefined} value
 * @return {!proto.jumanpp.FieldValue} returns this
*/
proto.jumanpp.FieldValue.prototype.setKvlist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.jumanpp.FieldValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jumanpp.FieldValue} returns this
 */
proto.jumanpp.FieldValue.prototype.clearKvlist = function() {
  return this.setKvlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.FieldValue.prototype.hasKvlist = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StringList string_list = 4;
 * @return {?proto.jumanpp.StringList}
 */
proto.jumanpp.FieldValue.prototype.getStringList = function() {
  return /** @type{?proto.jumanpp.StringList} */ (
    jspb.Message.getWrapperField(this, proto.jumanpp.StringList, 4));
};


/**
 * @param {?proto.jumanpp.StringList|undefined} value
 * @return {!proto.jumanpp.FieldValue} returns this
*/
proto.jumanpp.FieldValue.prototype.setStringList = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.jumanpp.FieldValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jumanpp.FieldValue} returns this
 */
proto.jumanpp.FieldValue.prototype.clearStringList = function() {
  return this.setStringList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.FieldValue.prototype.hasStringList = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jumanpp.LatticeDumpNode.repeatedFields_ = [1,2,5,7,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.LatticeDumpNode.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.LatticeDumpNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.LatticeDumpNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.LatticeDumpNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuePtrsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.jumanpp.FieldValue.toObject, includeInstance),
    surface: jspb.Message.getFieldWithDefault(msg, 3, ""),
    length: jspb.Message.getFieldWithDefault(msg, 4, 0),
    variantsList: jspb.Message.toObjectList(msg.getVariantsList(),
    proto.jumanpp.LatticeDumpNode.toObject, includeInstance),
    entryPtr: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ranksList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    patternsList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    beamsList: jspb.Message.toObjectList(msg.getBeamsList(),
    proto.jumanpp.LatticePathNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.LatticeDumpNode}
 */
proto.jumanpp.LatticeDumpNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.LatticeDumpNode;
  return proto.jumanpp.LatticeDumpNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.LatticeDumpNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.LatticeDumpNode}
 */
proto.jumanpp.LatticeDumpNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setValuePtrsList(value);
      break;
    case 2:
      var value = new proto.jumanpp.FieldValue;
      reader.readMessage(value,proto.jumanpp.FieldValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSurface(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 5:
      var value = new proto.jumanpp.LatticeDumpNode;
      reader.readMessage(value,proto.jumanpp.LatticeDumpNode.deserializeBinaryFromReader);
      msg.addVariants(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntryPtr(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setRanksList(value);
      break;
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed64());
      msg.setPatternsList(value);
      break;
    case 11:
      var value = new proto.jumanpp.LatticePathNode;
      reader.readMessage(value,proto.jumanpp.LatticePathNode.deserializeBinaryFromReader);
      msg.addBeams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.LatticeDumpNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.LatticeDumpNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.LatticeDumpNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.LatticeDumpNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuePtrsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.jumanpp.FieldValue.serializeBinaryToWriter
    );
  }
  f = message.getSurface();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getVariantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.jumanpp.LatticeDumpNode.serializeBinaryToWriter
    );
  }
  f = message.getEntryPtr();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getRanksList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getPatternsList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      10,
      f
    );
  }
  f = message.getBeamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.jumanpp.LatticePathNode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated int32 value_ptrs = 1;
 * @return {!Array<number>}
 */
proto.jumanpp.LatticeDumpNode.prototype.getValuePtrsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.setValuePtrsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.addValuePtrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.clearValuePtrsList = function() {
  return this.setValuePtrsList([]);
};


/**
 * repeated FieldValue values = 2;
 * @return {!Array<!proto.jumanpp.FieldValue>}
 */
proto.jumanpp.LatticeDumpNode.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.jumanpp.FieldValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jumanpp.FieldValue, 2));
};


/**
 * @param {!Array<!proto.jumanpp.FieldValue>} value
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
*/
proto.jumanpp.LatticeDumpNode.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.jumanpp.FieldValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.FieldValue}
 */
proto.jumanpp.LatticeDumpNode.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.jumanpp.FieldValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * optional string surface = 3;
 * @return {string}
 */
proto.jumanpp.LatticeDumpNode.prototype.getSurface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.setSurface = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 length = 4;
 * @return {number}
 */
proto.jumanpp.LatticeDumpNode.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated LatticeDumpNode variants = 5;
 * @return {!Array<!proto.jumanpp.LatticeDumpNode>}
 */
proto.jumanpp.LatticeDumpNode.prototype.getVariantsList = function() {
  return /** @type{!Array<!proto.jumanpp.LatticeDumpNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jumanpp.LatticeDumpNode, 5));
};


/**
 * @param {!Array<!proto.jumanpp.LatticeDumpNode>} value
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
*/
proto.jumanpp.LatticeDumpNode.prototype.setVariantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.jumanpp.LatticeDumpNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.LatticeDumpNode}
 */
proto.jumanpp.LatticeDumpNode.prototype.addVariants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.jumanpp.LatticeDumpNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.clearVariantsList = function() {
  return this.setVariantsList([]);
};


/**
 * optional int32 entry_ptr = 6;
 * @return {number}
 */
proto.jumanpp.LatticeDumpNode.prototype.getEntryPtr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.setEntryPtr = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated int32 ranks = 7;
 * @return {!Array<number>}
 */
proto.jumanpp.LatticeDumpNode.prototype.getRanksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.setRanksList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.addRanks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.clearRanksList = function() {
  return this.setRanksList([]);
};


/**
 * repeated fixed64 patterns = 10;
 * @return {!Array<number>}
 */
proto.jumanpp.LatticeDumpNode.prototype.getPatternsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.setPatternsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.addPatterns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.clearPatternsList = function() {
  return this.setPatternsList([]);
};


/**
 * repeated LatticePathNode beams = 11;
 * @return {!Array<!proto.jumanpp.LatticePathNode>}
 */
proto.jumanpp.LatticeDumpNode.prototype.getBeamsList = function() {
  return /** @type{!Array<!proto.jumanpp.LatticePathNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jumanpp.LatticePathNode, 11));
};


/**
 * @param {!Array<!proto.jumanpp.LatticePathNode>} value
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
*/
proto.jumanpp.LatticeDumpNode.prototype.setBeamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.jumanpp.LatticePathNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.LatticePathNode}
 */
proto.jumanpp.LatticeDumpNode.prototype.addBeams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.jumanpp.LatticePathNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticeDumpNode} returns this
 */
proto.jumanpp.LatticeDumpNode.prototype.clearBeamsList = function() {
  return this.setBeamsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jumanpp.LatticeBoundary.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.LatticeBoundary.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.LatticeBoundary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.LatticeBoundary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.LatticeBoundary.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.jumanpp.LatticeDumpNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.LatticeBoundary}
 */
proto.jumanpp.LatticeBoundary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.LatticeBoundary;
  return proto.jumanpp.LatticeBoundary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.LatticeBoundary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.LatticeBoundary}
 */
proto.jumanpp.LatticeBoundary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jumanpp.LatticeDumpNode;
      reader.readMessage(value,proto.jumanpp.LatticeDumpNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.LatticeBoundary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.LatticeBoundary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.LatticeBoundary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.LatticeBoundary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.jumanpp.LatticeDumpNode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LatticeDumpNode nodes = 1;
 * @return {!Array<!proto.jumanpp.LatticeDumpNode>}
 */
proto.jumanpp.LatticeBoundary.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.jumanpp.LatticeDumpNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jumanpp.LatticeDumpNode, 1));
};


/**
 * @param {!Array<!proto.jumanpp.LatticeDumpNode>} value
 * @return {!proto.jumanpp.LatticeBoundary} returns this
*/
proto.jumanpp.LatticeBoundary.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jumanpp.LatticeDumpNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.LatticeDumpNode}
 */
proto.jumanpp.LatticeBoundary.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jumanpp.LatticeDumpNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticeBoundary} returns this
 */
proto.jumanpp.LatticeBoundary.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jumanpp.LatticeDump.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.LatticeDump.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.LatticeDump.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.LatticeDump} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.LatticeDump.toObject = function(includeInstance, msg) {
  var f, obj = {
    surface: jspb.Message.getFieldWithDefault(msg, 1, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 2, ""),
    boundariesList: jspb.Message.toObjectList(msg.getBoundariesList(),
    proto.jumanpp.LatticeBoundary.toObject, includeInstance),
    fieldNamesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    surfaceIdx: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.LatticeDump}
 */
proto.jumanpp.LatticeDump.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.LatticeDump;
  return proto.jumanpp.LatticeDump.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.LatticeDump} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.LatticeDump}
 */
proto.jumanpp.LatticeDump.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSurface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    case 3:
      var value = new proto.jumanpp.LatticeBoundary;
      reader.readMessage(value,proto.jumanpp.LatticeBoundary.deserializeBinaryFromReader);
      msg.addBoundaries(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addFieldNames(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSurfaceIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.LatticeDump.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.LatticeDump.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.LatticeDump} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.LatticeDump.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSurface();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBoundariesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.jumanpp.LatticeBoundary.serializeBinaryToWriter
    );
  }
  f = message.getFieldNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getSurfaceIdx();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string surface = 1;
 * @return {string}
 */
proto.jumanpp.LatticeDump.prototype.getSurface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.LatticeDump} returns this
 */
proto.jumanpp.LatticeDump.prototype.setSurface = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string comment = 2;
 * @return {string}
 */
proto.jumanpp.LatticeDump.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.LatticeDump} returns this
 */
proto.jumanpp.LatticeDump.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated LatticeBoundary boundaries = 3;
 * @return {!Array<!proto.jumanpp.LatticeBoundary>}
 */
proto.jumanpp.LatticeDump.prototype.getBoundariesList = function() {
  return /** @type{!Array<!proto.jumanpp.LatticeBoundary>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jumanpp.LatticeBoundary, 3));
};


/**
 * @param {!Array<!proto.jumanpp.LatticeBoundary>} value
 * @return {!proto.jumanpp.LatticeDump} returns this
*/
proto.jumanpp.LatticeDump.prototype.setBoundariesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.jumanpp.LatticeBoundary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.LatticeBoundary}
 */
proto.jumanpp.LatticeDump.prototype.addBoundaries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.jumanpp.LatticeBoundary, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticeDump} returns this
 */
proto.jumanpp.LatticeDump.prototype.clearBoundariesList = function() {
  return this.setBoundariesList([]);
};


/**
 * repeated string field_names = 4;
 * @return {!Array<string>}
 */
proto.jumanpp.LatticeDump.prototype.getFieldNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jumanpp.LatticeDump} returns this
 */
proto.jumanpp.LatticeDump.prototype.setFieldNamesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.LatticeDump} returns this
 */
proto.jumanpp.LatticeDump.prototype.addFieldNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.LatticeDump} returns this
 */
proto.jumanpp.LatticeDump.prototype.clearFieldNamesList = function() {
  return this.setFieldNamesList([]);
};


/**
 * optional int32 surface_idx = 5;
 * @return {number}
 */
proto.jumanpp.LatticeDump.prototype.getSurfaceIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.LatticeDump} returns this
 */
proto.jumanpp.LatticeDump.prototype.setSurfaceIdx = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto.jumanpp);
