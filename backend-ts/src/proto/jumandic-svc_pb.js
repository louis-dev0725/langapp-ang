// source: jumandic-svc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var lattice_dump_pb = require('./lattice_dump_pb.js');
goog.object.extend(proto, lattice_dump_pb);
var juman_pb = require('./juman_pb.js');
goog.object.extend(proto, juman_pb);
var jumanpp_pb = require('./jumanpp_pb.js');
goog.object.extend(proto, jumanpp_pb);
goog.exportSymbol('proto.jumanpp.grpc.AnalysisRequest', null, global);
goog.exportSymbol('proto.jumanpp.grpc.JumanppConfig', null, global);
goog.exportSymbol('proto.jumanpp.grpc.RequestType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.grpc.AnalysisRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jumanpp.grpc.AnalysisRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.grpc.AnalysisRequest.displayName = 'proto.jumanpp.grpc.AnalysisRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.grpc.JumanppConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jumanpp.grpc.JumanppConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.grpc.JumanppConfig.displayName = 'proto.jumanpp.grpc.JumanppConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.grpc.AnalysisRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.grpc.AnalysisRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.grpc.AnalysisRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sentence: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    config: (f = msg.getConfig()) && proto.jumanpp.grpc.JumanppConfig.toObject(includeInstance, f),
    topN: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.grpc.AnalysisRequest}
 */
proto.jumanpp.grpc.AnalysisRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.grpc.AnalysisRequest;
  return proto.jumanpp.grpc.AnalysisRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.grpc.AnalysisRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.grpc.AnalysisRequest}
 */
proto.jumanpp.grpc.AnalysisRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSentence(value);
      break;
    case 3:
      var value = /** @type {!proto.jumanpp.grpc.RequestType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.jumanpp.grpc.JumanppConfig;
      reader.readMessage(value,proto.jumanpp.grpc.JumanppConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTopN(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.grpc.AnalysisRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.grpc.AnalysisRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.grpc.AnalysisRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSentence();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.jumanpp.grpc.JumanppConfig.serializeBinaryToWriter
    );
  }
  f = message.getTopN();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.grpc.AnalysisRequest} returns this
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sentence = 2;
 * @return {string}
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.getSentence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.grpc.AnalysisRequest} returns this
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.setSentence = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional RequestType type = 3;
 * @return {!proto.jumanpp.grpc.RequestType}
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.getType = function() {
  return /** @type {!proto.jumanpp.grpc.RequestType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.jumanpp.grpc.RequestType} value
 * @return {!proto.jumanpp.grpc.AnalysisRequest} returns this
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional JumanppConfig config = 4;
 * @return {?proto.jumanpp.grpc.JumanppConfig}
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.getConfig = function() {
  return /** @type{?proto.jumanpp.grpc.JumanppConfig} */ (
    jspb.Message.getWrapperField(this, proto.jumanpp.grpc.JumanppConfig, 4));
};


/**
 * @param {?proto.jumanpp.grpc.JumanppConfig|undefined} value
 * @return {!proto.jumanpp.grpc.AnalysisRequest} returns this
*/
proto.jumanpp.grpc.AnalysisRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jumanpp.grpc.AnalysisRequest} returns this
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 top_n = 5;
 * @return {number}
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.getTopN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.grpc.AnalysisRequest} returns this
 */
proto.jumanpp.grpc.AnalysisRequest.prototype.setTopN = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.grpc.JumanppConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.grpc.JumanppConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.grpc.JumanppConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.grpc.JumanppConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    localBeam: jspb.Message.getFieldWithDefault(msg, 1, 0),
    globalBeamRight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    globalBeamLeft: jspb.Message.getFieldWithDefault(msg, 3, 0),
    globalBeamCheck: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ignoreRnn: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.grpc.JumanppConfig}
 */
proto.jumanpp.grpc.JumanppConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.grpc.JumanppConfig;
  return proto.jumanpp.grpc.JumanppConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.grpc.JumanppConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.grpc.JumanppConfig}
 */
proto.jumanpp.grpc.JumanppConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLocalBeam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setGlobalBeamRight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setGlobalBeamLeft(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setGlobalBeamCheck(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIgnoreRnn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.grpc.JumanppConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.grpc.JumanppConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.grpc.JumanppConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.grpc.JumanppConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalBeam();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getGlobalBeamRight();
  if (f !== 0) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = message.getGlobalBeamLeft();
  if (f !== 0) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = message.getGlobalBeamCheck();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = message.getIgnoreRnn();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional sint32 local_beam = 1;
 * @return {number}
 */
proto.jumanpp.grpc.JumanppConfig.prototype.getLocalBeam = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.grpc.JumanppConfig} returns this
 */
proto.jumanpp.grpc.JumanppConfig.prototype.setLocalBeam = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional sint32 global_beam_right = 2;
 * @return {number}
 */
proto.jumanpp.grpc.JumanppConfig.prototype.getGlobalBeamRight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.grpc.JumanppConfig} returns this
 */
proto.jumanpp.grpc.JumanppConfig.prototype.setGlobalBeamRight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional sint32 global_beam_left = 3;
 * @return {number}
 */
proto.jumanpp.grpc.JumanppConfig.prototype.getGlobalBeamLeft = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.grpc.JumanppConfig} returns this
 */
proto.jumanpp.grpc.JumanppConfig.prototype.setGlobalBeamLeft = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint32 global_beam_check = 4;
 * @return {number}
 */
proto.jumanpp.grpc.JumanppConfig.prototype.getGlobalBeamCheck = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.grpc.JumanppConfig} returns this
 */
proto.jumanpp.grpc.JumanppConfig.prototype.setGlobalBeamCheck = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool ignore_rnn = 5;
 * @return {boolean}
 */
proto.jumanpp.grpc.JumanppConfig.prototype.getIgnoreRnn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.jumanpp.grpc.JumanppConfig} returns this
 */
proto.jumanpp.grpc.JumanppConfig.prototype.setIgnoreRnn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.jumanpp.grpc.RequestType = {
  NORMAL: 0,
  PARTIALANNOTATION: 1
};

goog.object.extend(exports, proto.jumanpp.grpc);
