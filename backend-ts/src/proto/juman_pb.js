// source: juman.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.jumanpp.JumanFeature', null, global);
goog.exportSymbol('proto.jumanpp.JumanMorpheme', null, global);
goog.exportSymbol('proto.jumanpp.JumanPos', null, global);
goog.exportSymbol('proto.jumanpp.JumanSentence', null, global);
goog.exportSymbol('proto.jumanpp.JumanStringPos', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.JumanSentence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jumanpp.JumanSentence.repeatedFields_, null);
};
goog.inherits(proto.jumanpp.JumanSentence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.JumanSentence.displayName = 'proto.jumanpp.JumanSentence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.JumanMorpheme = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jumanpp.JumanMorpheme.repeatedFields_, null);
};
goog.inherits(proto.jumanpp.JumanMorpheme, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.JumanMorpheme.displayName = 'proto.jumanpp.JumanMorpheme';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.JumanPos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jumanpp.JumanPos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.JumanPos.displayName = 'proto.jumanpp.JumanPos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.JumanStringPos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jumanpp.JumanStringPos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.JumanStringPos.displayName = 'proto.jumanpp.JumanStringPos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jumanpp.JumanFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jumanpp.JumanFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jumanpp.JumanFeature.displayName = 'proto.jumanpp.JumanFeature';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jumanpp.JumanSentence.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.JumanSentence.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.JumanSentence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.JumanSentence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.JumanSentence.toObject = function(includeInstance, msg) {
  var f, obj = {
    morphemesList: jspb.Message.toObjectList(msg.getMorphemesList(),
    proto.jumanpp.JumanMorpheme.toObject, includeInstance),
    comment: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.JumanSentence}
 */
proto.jumanpp.JumanSentence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.JumanSentence;
  return proto.jumanpp.JumanSentence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.JumanSentence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.JumanSentence}
 */
proto.jumanpp.JumanSentence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.jumanpp.JumanMorpheme;
      reader.readMessage(value,proto.jumanpp.JumanMorpheme.deserializeBinaryFromReader);
      msg.addMorphemes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.JumanSentence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.JumanSentence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.JumanSentence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.JumanSentence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMorphemesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.jumanpp.JumanMorpheme.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated JumanMorpheme morphemes = 1;
 * @return {!Array<!proto.jumanpp.JumanMorpheme>}
 */
proto.jumanpp.JumanSentence.prototype.getMorphemesList = function() {
  return /** @type{!Array<!proto.jumanpp.JumanMorpheme>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jumanpp.JumanMorpheme, 1));
};


/**
 * @param {!Array<!proto.jumanpp.JumanMorpheme>} value
 * @return {!proto.jumanpp.JumanSentence} returns this
*/
proto.jumanpp.JumanSentence.prototype.setMorphemesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jumanpp.JumanMorpheme=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.JumanMorpheme}
 */
proto.jumanpp.JumanSentence.prototype.addMorphemes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jumanpp.JumanMorpheme, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.JumanSentence} returns this
 */
proto.jumanpp.JumanSentence.prototype.clearMorphemesList = function() {
  return this.setMorphemesList([]);
};


/**
 * optional string comment = 2;
 * @return {string}
 */
proto.jumanpp.JumanSentence.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.JumanSentence} returns this
 */
proto.jumanpp.JumanSentence.prototype.setComment = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanSentence} returns this
 */
proto.jumanpp.JumanSentence.prototype.clearComment = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanSentence.prototype.hasComment = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jumanpp.JumanMorpheme.repeatedFields_ = [5,20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.JumanMorpheme.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.JumanMorpheme.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.JumanMorpheme} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.JumanMorpheme.toObject = function(includeInstance, msg) {
  var f, obj = {
    surface: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    reading: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    baseform: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    posinfo: (f = msg.getPosinfo()) && proto.jumanpp.JumanPos.toObject(includeInstance, f),
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    proto.jumanpp.JumanFeature.toObject, includeInstance),
    stringPos: (f = msg.getStringPos()) && proto.jumanpp.JumanStringPos.toObject(includeInstance, f),
    variantsList: jspb.Message.toObjectList(msg.getVariantsList(),
    proto.jumanpp.JumanMorpheme.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.JumanMorpheme}
 */
proto.jumanpp.JumanMorpheme.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.JumanMorpheme;
  return proto.jumanpp.JumanMorpheme.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.JumanMorpheme} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.JumanMorpheme}
 */
proto.jumanpp.JumanMorpheme.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSurface(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReading(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseform(value);
      break;
    case 4:
      var value = new proto.jumanpp.JumanPos;
      reader.readMessage(value,proto.jumanpp.JumanPos.deserializeBinaryFromReader);
      msg.setPosinfo(value);
      break;
    case 5:
      var value = new proto.jumanpp.JumanFeature;
      reader.readMessage(value,proto.jumanpp.JumanFeature.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 6:
      var value = new proto.jumanpp.JumanStringPos;
      reader.readMessage(value,proto.jumanpp.JumanStringPos.deserializeBinaryFromReader);
      msg.setStringPos(value);
      break;
    case 20:
      var value = new proto.jumanpp.JumanMorpheme;
      reader.readMessage(value,proto.jumanpp.JumanMorpheme.deserializeBinaryFromReader);
      msg.addVariants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.JumanMorpheme.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.JumanMorpheme.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.JumanMorpheme} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.JumanMorpheme.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPosinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.jumanpp.JumanPos.serializeBinaryToWriter
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.jumanpp.JumanFeature.serializeBinaryToWriter
    );
  }
  f = message.getStringPos();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.jumanpp.JumanStringPos.serializeBinaryToWriter
    );
  }
  f = message.getVariantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.jumanpp.JumanMorpheme.serializeBinaryToWriter
    );
  }
};


/**
 * required string surface = 1;
 * @return {string}
 */
proto.jumanpp.JumanMorpheme.prototype.getSurface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.JumanMorpheme} returns this
 */
proto.jumanpp.JumanMorpheme.prototype.setSurface = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanMorpheme} returns this
 */
proto.jumanpp.JumanMorpheme.prototype.clearSurface = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanMorpheme.prototype.hasSurface = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string reading = 2;
 * @return {string}
 */
proto.jumanpp.JumanMorpheme.prototype.getReading = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.JumanMorpheme} returns this
 */
proto.jumanpp.JumanMorpheme.prototype.setReading = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanMorpheme} returns this
 */
proto.jumanpp.JumanMorpheme.prototype.clearReading = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanMorpheme.prototype.hasReading = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string baseform = 3;
 * @return {string}
 */
proto.jumanpp.JumanMorpheme.prototype.getBaseform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.JumanMorpheme} returns this
 */
proto.jumanpp.JumanMorpheme.prototype.setBaseform = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanMorpheme} returns this
 */
proto.jumanpp.JumanMorpheme.prototype.clearBaseform = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanMorpheme.prototype.hasBaseform = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required JumanPos posInfo = 4;
 * @return {!proto.jumanpp.JumanPos}
 */
proto.jumanpp.JumanMorpheme.prototype.getPosinfo = function() {
  return /** @type{!proto.jumanpp.JumanPos} */ (
    jspb.Message.getWrapperField(this, proto.jumanpp.JumanPos, 4, 1));
};


/**
 * @param {!proto.jumanpp.JumanPos} value
 * @return {!proto.jumanpp.JumanMorpheme} returns this
*/
proto.jumanpp.JumanMorpheme.prototype.setPosinfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanMorpheme} returns this
 */
proto.jumanpp.JumanMorpheme.prototype.clearPosinfo = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanMorpheme.prototype.hasPosinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated JumanFeature features = 5;
 * @return {!Array<!proto.jumanpp.JumanFeature>}
 */
proto.jumanpp.JumanMorpheme.prototype.getFeaturesList = function() {
  return /** @type{!Array<!proto.jumanpp.JumanFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jumanpp.JumanFeature, 5));
};


/**
 * @param {!Array<!proto.jumanpp.JumanFeature>} value
 * @return {!proto.jumanpp.JumanMorpheme} returns this
*/
proto.jumanpp.JumanMorpheme.prototype.setFeaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.jumanpp.JumanFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.JumanFeature}
 */
proto.jumanpp.JumanMorpheme.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.jumanpp.JumanFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.JumanMorpheme} returns this
 */
proto.jumanpp.JumanMorpheme.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * optional JumanStringPos string_pos = 6;
 * @return {?proto.jumanpp.JumanStringPos}
 */
proto.jumanpp.JumanMorpheme.prototype.getStringPos = function() {
  return /** @type{?proto.jumanpp.JumanStringPos} */ (
    jspb.Message.getWrapperField(this, proto.jumanpp.JumanStringPos, 6));
};


/**
 * @param {?proto.jumanpp.JumanStringPos|undefined} value
 * @return {!proto.jumanpp.JumanMorpheme} returns this
*/
proto.jumanpp.JumanMorpheme.prototype.setStringPos = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jumanpp.JumanMorpheme} returns this
 */
proto.jumanpp.JumanMorpheme.prototype.clearStringPos = function() {
  return this.setStringPos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanMorpheme.prototype.hasStringPos = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated JumanMorpheme variants = 20;
 * @return {!Array<!proto.jumanpp.JumanMorpheme>}
 */
proto.jumanpp.JumanMorpheme.prototype.getVariantsList = function() {
  return /** @type{!Array<!proto.jumanpp.JumanMorpheme>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.jumanpp.JumanMorpheme, 20));
};


/**
 * @param {!Array<!proto.jumanpp.JumanMorpheme>} value
 * @return {!proto.jumanpp.JumanMorpheme} returns this
*/
proto.jumanpp.JumanMorpheme.prototype.setVariantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.jumanpp.JumanMorpheme=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jumanpp.JumanMorpheme}
 */
proto.jumanpp.JumanMorpheme.prototype.addVariants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.jumanpp.JumanMorpheme, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jumanpp.JumanMorpheme} returns this
 */
proto.jumanpp.JumanMorpheme.prototype.clearVariantsList = function() {
  return this.setVariantsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.JumanPos.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.JumanPos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.JumanPos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.JumanPos.toObject = function(includeInstance, msg) {
  var f, obj = {
    pos: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    subpos: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    conjType: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    conjForm: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.JumanPos}
 */
proto.jumanpp.JumanPos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.JumanPos;
  return proto.jumanpp.JumanPos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.JumanPos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.JumanPos}
 */
proto.jumanpp.JumanPos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSubpos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConjType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConjForm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.JumanPos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.JumanPos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.JumanPos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.JumanPos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 pos = 1;
 * @return {number}
 */
proto.jumanpp.JumanPos.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.JumanPos} returns this
 */
proto.jumanpp.JumanPos.prototype.setPos = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanPos} returns this
 */
proto.jumanpp.JumanPos.prototype.clearPos = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanPos.prototype.hasPos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 subpos = 2;
 * @return {number}
 */
proto.jumanpp.JumanPos.prototype.getSubpos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.JumanPos} returns this
 */
proto.jumanpp.JumanPos.prototype.setSubpos = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanPos} returns this
 */
proto.jumanpp.JumanPos.prototype.clearSubpos = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanPos.prototype.hasSubpos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 conj_type = 3;
 * @return {number}
 */
proto.jumanpp.JumanPos.prototype.getConjType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.JumanPos} returns this
 */
proto.jumanpp.JumanPos.prototype.setConjType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanPos} returns this
 */
proto.jumanpp.JumanPos.prototype.clearConjType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanPos.prototype.hasConjType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 conj_form = 4;
 * @return {number}
 */
proto.jumanpp.JumanPos.prototype.getConjForm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.jumanpp.JumanPos} returns this
 */
proto.jumanpp.JumanPos.prototype.setConjForm = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanPos} returns this
 */
proto.jumanpp.JumanPos.prototype.clearConjForm = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanPos.prototype.hasConjForm = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.JumanStringPos.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.JumanStringPos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.JumanStringPos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.JumanStringPos.toObject = function(includeInstance, msg) {
  var f, obj = {
    pos: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    subpos: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    conjType: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    conjForm: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.JumanStringPos}
 */
proto.jumanpp.JumanStringPos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.JumanStringPos;
  return proto.jumanpp.JumanStringPos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.JumanStringPos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.JumanStringPos}
 */
proto.jumanpp.JumanStringPos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPos(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubpos(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConjType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConjForm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.JumanStringPos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.JumanStringPos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.JumanStringPos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.JumanStringPos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string pos = 1;
 * @return {string}
 */
proto.jumanpp.JumanStringPos.prototype.getPos = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.JumanStringPos} returns this
 */
proto.jumanpp.JumanStringPos.prototype.setPos = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanStringPos} returns this
 */
proto.jumanpp.JumanStringPos.prototype.clearPos = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanStringPos.prototype.hasPos = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string subpos = 2;
 * @return {string}
 */
proto.jumanpp.JumanStringPos.prototype.getSubpos = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.JumanStringPos} returns this
 */
proto.jumanpp.JumanStringPos.prototype.setSubpos = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanStringPos} returns this
 */
proto.jumanpp.JumanStringPos.prototype.clearSubpos = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanStringPos.prototype.hasSubpos = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string conj_type = 3;
 * @return {string}
 */
proto.jumanpp.JumanStringPos.prototype.getConjType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.JumanStringPos} returns this
 */
proto.jumanpp.JumanStringPos.prototype.setConjType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanStringPos} returns this
 */
proto.jumanpp.JumanStringPos.prototype.clearConjType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanStringPos.prototype.hasConjType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string conj_form = 4;
 * @return {string}
 */
proto.jumanpp.JumanStringPos.prototype.getConjForm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.JumanStringPos} returns this
 */
proto.jumanpp.JumanStringPos.prototype.setConjForm = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanStringPos} returns this
 */
proto.jumanpp.JumanStringPos.prototype.clearConjForm = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanStringPos.prototype.hasConjForm = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jumanpp.JumanFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.jumanpp.JumanFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jumanpp.JumanFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.JumanFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    value: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jumanpp.JumanFeature}
 */
proto.jumanpp.JumanFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jumanpp.JumanFeature;
  return proto.jumanpp.JumanFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jumanpp.JumanFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jumanpp.JumanFeature}
 */
proto.jumanpp.JumanFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jumanpp.JumanFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jumanpp.JumanFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jumanpp.JumanFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jumanpp.JumanFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string key = 1;
 * @return {string}
 */
proto.jumanpp.JumanFeature.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.JumanFeature} returns this
 */
proto.jumanpp.JumanFeature.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanFeature} returns this
 */
proto.jumanpp.JumanFeature.prototype.clearKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanFeature.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.jumanpp.JumanFeature.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jumanpp.JumanFeature} returns this
 */
proto.jumanpp.JumanFeature.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jumanpp.JumanFeature} returns this
 */
proto.jumanpp.JumanFeature.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jumanpp.JumanFeature.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.jumanpp);
